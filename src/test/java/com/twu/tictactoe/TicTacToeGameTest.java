package com.twu.tictactoe;

import org.junit.Before;
import org.junit.Test;

import java.io.PrintStream;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'msloane' at '8/6/15 1:19 PM' with Gradle 2.5
 *
 * @author msloane, @date 8/6/15 1:19 PM
 */
public class TicTacToeGameTest {

    private PrintStream printStream;
    private TicTacToeGame game;

    @Before
    public void setUp() {
        printStream = mock(PrintStream.class);
        game = new TicTacToeGame();
    }

    @Test public void shouldDrawBoardWhenGameStarts() {

        assertThat(game.drawBoard(), is("   |   |   \n" +
                                        "---------\n" +
                                        "   |   |   \n" +
                                        "---------\n" +
                                        "   |   |   \n"));
    }

    @Test public void shouldReturnInvalidMoveWhenInvalidMove() {

        Player p1 = mock(Player.class);
        when(p1.toString()).thenReturn("X");

        game.redrawBoard(1, p1);
        assertFalse(game.isValidMove(1));
    }

    @Test public void shouldReturnValidMoveWhenValidMove() {

        Player p1 = mock(Player.class);
        when(p1.toString()).thenReturn("X");

        game.redrawBoard(1, p1);
        assertTrue(game.isValidMove(2));
    }

    @Test public void shouldReturnTrueWhenBoardIsFull() {

        Player p1 = mock(Player.class);
        Player p2 = mock(Player.class);
        when(p1.toString()).thenReturn("X");
        when(p2.toString()).thenReturn("O");

        game.redrawBoard(1, p1);
        game.redrawBoard(2, p2);
        game.redrawBoard(3, p1);
        game.redrawBoard(4, p2);
        game.redrawBoard(9, p1);
        game.redrawBoard(8, p2);
        game.redrawBoard(7, p1);
        game.redrawBoard(6, p2);
        game.redrawBoard(5, p1);
        assertTrue(game.boardIsFull());
    }

    @Test public void shouldReturnFalseWhenBoardIsNotFull() {

        Player p1 = mock(Player.class);
        Player p2 = mock(Player.class);
        when(p1.toString()).thenReturn("X");
        when(p2.toString()).thenReturn("O");

        game.redrawBoard(1, p1);
        game.redrawBoard(2, p2);
        game.redrawBoard(3, p1);
        game.redrawBoard(4, p2);
        game.redrawBoard(9, p1);
        game.redrawBoard(8, p2);
        game.redrawBoard(7, p1);
        game.redrawBoard(6, p2);
        assertFalse(game.boardIsFull());
    }
}
